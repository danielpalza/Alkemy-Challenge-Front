[{"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\index.js":"1","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\App.js":"2","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Add.js":"3","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\List.js":"4","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Main.js":"5","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Login.js":"6","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\services\\Fetch.js":"7"},{"size":220,"mtime":1612377246416,"results":"8","hashOfConfig":"9"},{"size":1366,"mtime":1612396805039,"results":"10","hashOfConfig":"9"},{"size":566,"mtime":1612382084389,"results":"11","hashOfConfig":"9"},{"size":127,"mtime":1612379488135,"results":"12","hashOfConfig":"9"},{"size":991,"mtime":1612389647399,"results":"13","hashOfConfig":"9"},{"size":2133,"mtime":1612454942363,"results":"14","hashOfConfig":"9"},{"size":692,"mtime":1612394199919,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"pnplt4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\index.js",[],["34","35"],"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\App.js",["36","37","38"],"import Main from \"./componentes/Main\";\nimport {useState} from \"react\"\nimport Login from \"./componentes/Login\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nfunction App() {\n  console.log(\"token:\", localStorage.getItem(\"token\"));\n  let [isLogin, setIsLogin] = useState(false)\n\n\n  //Comprabacion del token\n  const Auth = () => {\n    if (localStorage.getItem(\"token\")) {\n      let urlRoot = \"http://localhost:4000/usuario/auth\"; //Cambiar a la url donde se alojara la API\n      let xmlhttp = new XMLHttpRequest();\n      xmlhttp.open(\"GET\", urlRoot, true);\n      xmlhttp.onreadystatechange = function () {\n        if (this.readyState == 4 && this.status == 200) {\n          return JSON.parse(this.responseText).status == \"ok\" ? true : false;\n        }\n      };\n      xmlhttp.setRequestHeader(\"token\", localStorage.getItem(\"token\"));\n      xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n      xmlhttp.send();\n    }\n  };\n  console.log(\"isLogin: \", isLogin)\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/login\" render={() => (isLogin ? <Redirect exact to=\"/\" /> : <Login isLogin={setIsLogin} />)} />\n\n        <Route\n          exact\n          path=\"/\"\n          render={() => (Auth()  ? <Redirect to=\"/login\" /> : <Main />)}\n        />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Add.js",["39"],"import Fetch from \"../services/Fetch\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Add() {\r\n  return (\r\n    <form onSubmit={console.log(\"enviado\")}>\r\n      <input name=\"tipo\" placeholder=\"Tipo\" type=\"text\" />\r\n      <input name=\"concepto\" placeholder=\"Concepto\" type=\"text\" />\r\n      <input name=\"monto\" placeholder=\"Monto\" type=\"text\" />\r\n      <input name=\"fecha\" placeholder=\"Fecha\" type=\"text\" />\r\n      <input type=\"submit\" value=\"Enviar\" />\r\n      <Link to=\"/\"><button>Regresar a inicio</button></Link>  \r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Add;\r\n","D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\List.js",[],"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Main.js",[],"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\componentes\\Login.js",[],"D:\\Proyectos\\Alkemy\\Alkemy-Challenge\\app-administracion\\src\\services\\Fetch.js",["40","41"],"\r\nexport default function Fetch(method, url, body={}, token=\"\", action={}){\r\n    let urlRoot = \"http://localhost:4000\"+url //Cambiar a la url donde se alojara la API\r\n    let xmlhttp = new XMLHttpRequest();\r\n    xmlhttp.open(method, urlRoot, true);\r\n    console.log(\"fetch:\",body)\r\n  \r\n    xmlhttp.onreadystatechange = function() \r\n    {\r\n        if (this.readyState == 4 && this.status == 200) \r\n        {\r\n            typeof action == 'function' && action(JSON.parse(this.responseText)) \r\n         \r\n           \r\n        }\r\n    };\r\n    xmlhttp.setRequestHeader(\"token\", token);\r\n    xmlhttp.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    xmlhttp.send( JSON.stringify(body) );\r\n}",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":23,"column":29,"nodeType":"48","messageId":"49","endLine":23,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":23,"column":49,"nodeType":"48","messageId":"49","endLine":23,"endColumn":51},{"ruleId":"46","severity":1,"message":"47","line":24,"column":55,"nodeType":"48","messageId":"49","endLine":24,"endColumn":57},{"ruleId":"50","severity":1,"message":"51","line":1,"column":8,"nodeType":"52","messageId":"53","endLine":1,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":10,"column":29,"nodeType":"48","messageId":"49","endLine":10,"endColumn":31},{"ruleId":"46","severity":1,"message":"47","line":10,"column":49,"nodeType":"48","messageId":"49","endLine":10,"endColumn":51},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'Fetch' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]